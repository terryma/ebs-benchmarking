!!!
html
  head
    title= title
    link(rel='stylesheet', href='/stylesheets/style.css')
    link(rel='stylesheet', href='/stylesheets/Aristo/jquery-ui-1.8.7.custom.css')
    script(type='text/javascript', src='https://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js')
    script(type='text/javascript', src='https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.13/jquery-ui.min.js')
    script(type='text/javascript', src='https://www.google.com/jsapi')
    script(type='text/javascript', src='/javascripts/json2.js')
    script(type='text/javascript', src='/javascripts/jquery.flot.js')
    script(type='text/javascript', src='/javascripts/jquery.form.js')
    script(type='text/javascript', src='/javascripts/jquery.styletable.js')
    script(type='text/javascript', src='/javascripts/jquery.myGraph.js')
    script(type='text/javascript')

        var headers = ['Pattern', 'Plain', 'Encrypted'];
        var ioPatterns = ['Seq Read', 'Seq Write', 'Seq R/W', 'Rand Read', 'Rand Write', 'Rand R/W'];

        function clearTables() {
            $('.summary tbody tr td').each(function(index) {
                // Don't do anything for the first column
                if (index % (headers.length) == 0) {
                    return;
                }
                $(this).text("");
            });
        }

        function clearGraph() {
            for (var i in idToGraphs) {
                console.log(i);
                idToGraphs[i].myGraph('clear');
            };
        }

        function formatDate(date) {
            return pad(date.getMonth()+1, 2) + "/" + pad(date.getDate(), 2) + "/" + date.getFullYear() + " " + pad(date.getHours(), 2) + ":" + pad(date.getMinutes(), 2) + ":" + pad(date.getSeconds(), 2);
        }
        function pad(v) {
            return v < 10 ? "0"+v : v;
        }

        var latencyGraph = $('#latency-graph').myGraph({
            xaxis: {
                    // x-axis location for plain result
                    p:[1, 4, 7, 8, 12, 15, 18, 19],
                    e:[2, 5, 9, 10,13, 16, 20, 21],
                    t:[2, 5, 9, 13, 16, 20],
                    max:23
                   },
            yaxis: {
                        tickFormatter: function(v) {return v + " kbytes/s"},
                        max: 50000
                   }
        });

        var cpuUsrGraph = $('#cpu-usr-graph').myGraph({
            xaxis: {
                    // x-axis location for plain and encrypted result
                    p:[1, 4, 7, 10, 13, 16, 19],
                    e:[2, 5, 8, 11, 14, 17, 20],
                    // x-axis location for the ticks
                    t:[2, 5, 8, 11, 14, 17],
                    max:19
                   },
            yaxis: {
                        tickFormatter: function(v) {return v + "%"},
                        max: 10
                   }
        });

        var cpuSysGraph = $('#cpu-sys-graph').myGraph({
            xaxis: {
                    // x-axis location for plain and encrypted result
                    p:[1, 4, 7, 10, 13, 16, 19],
                    e:[2, 5, 8, 11, 14, 17, 20],
                    // x-axis location for the ticks
                    t:[2, 5, 8, 11, 14, 17],
                    max:19
                   },
            yaxis: {
                        tickFormatter: function(v) {return v + "%"},
                        max: 50
                   }
        });

        var idToGraphs = {
            'latency': latencyGraph,
            'cpu-usr': cpuUsrGraph,
            'cpu-sys': cpuSysGraph
        };


        function updateSection(params) {
            var regex = params.regex;
            var cells = [];
            var match;
            while (match = regex.exec(params.content)) {
                cells.push(match[1]);
            }
            var matches = cells.length; // This value should be either 16 or 12, depending on whether there're two values for Read/Write
            
            console.log(cells);

            idToGraphs[params.id].myGraph('update', cells).myGraph('plot');

            var $tbody = $('#'+params.id+'-table tbody');
            $('tr :nth-child(2)', $tbody).each(function(index) {
                console.log(index);
                var text = cells.shift() + params.unit;
                if (matches == 16 && index % 3 == 2) {
                    // These columns are read/write so shift twice
                    text += " / " + cells.shift() + params.unit;
                }
                $(this).text(text);
            });
            $('tr :nth-child(3)', $tbody).each(function(index) {
                var text = cells.shift() + params.unit;
                if (matches == 16 && index % 3 == 2) {
                    // These columns are read/write so shift twice
                    text += " / " + cells.shift() + params.unit;
                }
                $(this).text(text);
            });  
        }

        $(function() {

            var debug = false;

            // decorate the buttons
            $('.buttonset').buttonset();

            // register the live events
            $('#test-runs-table a').live('click', function() {
                var file = $(this).text();
                file = '/results/'+file;

                $.get(file, function(content) {
                    $('#test-output').text(content);
                    updateSection({
                        content: content,
                        id:'latency',
                        regex: /[READ:|WRITE:].*aggrb=(.*?)KB\\/s,/g,
                        unit: ' KB/s'
                    });
                    updateSection({
                        content: content,
                        id:'cpu-usr',
                        regex: /cpu.*usr=(.*?)%,/g,
                        unit: '%'
                    });
                    updateSection({
                        content: content,
                        id:'cpu-sys',
                        regex: /cpu.*sys=(.*?)%,/g,
                        unit: '%'
                    });
                });

                // Don't follow thru with the click
                return false;
            });

            // register the form
            var formOptions = {
                dataType: 'json',
                success: function(response) {
                    if (debug) {
                        $('#debug').append(JSON.stringify(response, null, '\t'));
                    }
                    var files = response.files;
                    // clear some sections
                    $('#test-runs').text("");
                    $('#test-output').text("");
                    clearTables();
                    clearGraph();

                    if (!files || files.length == 0) {
                        $('#test-runs').text("No test runs found for the above config");
                        $('#test-runs-table').hide();
                    } else {
                        $('#test-runs-table').show().find('tbody tr').remove();
                        $.each(files, function(index, file){
                            var time = new Date(parseInt(/.*-(.*)\.txt/.exec(file)[1])*1000);
                            $('#test-runs-table tbody').append("<tr><td><a href='.'>" + file +"</a></td><td>"+formatDate(time)+"</td></tr>");
                        });
                        $('#test-runs-table').styleTable();
                    }
                }
            };
            $('#form').ajaxForm(formOptions);

            // store all the radios 
            var radiosArr = [];
            $('.field').each(function() {
                var $radios = $(this).find('input:radio');
                radiosArr.push($radios);
            });

            // select the first element of each options, and register the change event
            $.each(radiosArr, function(index) {
                this.filter(':first').attr('checked', true).trigger('change');
                this.change(function(){
                    $('#form').submit();
                });
            });

            // do an initial submit
            $('#form').submit();

            // init the test run table
            $('#test-runs-table').styleTable();
        });
  body!= body
